[{"/home/runner/amtraker-next/pages/_app.jsx":"1","/home/runner/amtraker-next/pages/index.jsx":"2","/home/runner/amtraker-next/pages/trains/[trainNum].jsx":"3","/home/runner/amtraker-next/pages/trains/saved.jsx":"4","/home/runner/amtraker-next/components/map.jsx":"5","/home/runner/amtraker-next/components/tags.jsx":"6","/home/runner/amtraker-next/components/tagsTrain.jsx":"7","/home/runner/amtraker-next/components/trainBoxes/autoTrainBoxObjectID.jsx":"8","/home/runner/amtraker-next/components/trainBoxes/errorTrainBox.jsx":"9","/home/runner/amtraker-next/components/trainBoxes/manualTrainBox.jsx":"10","/home/runner/amtraker-next/components/trainBoxes/stationBox.jsx":"11","/home/runner/amtraker-next/components/trainLinks.jsx":"12","/home/runner/amtraker-next/components/nav/borger.jsx":"13","/home/runner/amtraker-next/components/stationBoxes/stationBox.jsx":"14","/home/runner/amtraker-next/components/stationBoxes/trainNum.jsx":"15","/home/runner/amtraker-next/components/trainBoxes/autoTrainBoxTrainNum.jsx":"16","/home/runner/amtraker-next/pages/trains/[...slug].jsx":"17","/home/runner/amtraker-next/pages/trains/new.jsx":"18"},{"size":145,"mtime":1645247536804,"results":"19","hashOfConfig":"20"},{"size":4544,"mtime":1646908151017,"results":"21","hashOfConfig":"20"},{"size":4463,"mtime":1646857238982,"results":"22","hashOfConfig":"20"},{"size":54,"mtime":1645248008392,"results":"23","hashOfConfig":"20"},{"size":6160,"mtime":1646908395333,"results":"24","hashOfConfig":"20"},{"size":3303,"mtime":1645247420583,"results":"25","hashOfConfig":"20"},{"size":3701,"mtime":1645247445702,"results":"26","hashOfConfig":"20"},{"size":1735,"mtime":1645415961303,"results":"27","hashOfConfig":"20"},{"size":538,"mtime":1645416467597,"results":"28","hashOfConfig":"20"},{"size":1495,"mtime":1646806642026,"results":"29","hashOfConfig":"20"},{"size":1190,"mtime":1645247465884,"results":"30","hashOfConfig":"20"},{"size":1978,"mtime":1646900723800,"results":"31","hashOfConfig":"20"},{"size":614,"mtime":1645506262748,"results":"32","hashOfConfig":"20"},{"size":3372,"mtime":1646517662127,"results":"33","hashOfConfig":"20"},{"size":1670,"mtime":1646851510923,"results":"34","hashOfConfig":"20"},{"size":1835,"mtime":1646535561121,"results":"35","hashOfConfig":"20"},{"size":563,"mtime":1646806536294,"results":"36","hashOfConfig":"20"},{"size":2896,"mtime":1646900685480,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wh3jxm",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/runner/amtraker-next/pages/_app.jsx",[],"/home/runner/amtraker-next/pages/index.jsx",["80"],"import Head from 'next/head';\nimport Dynamic from 'next/dynamic';\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router'\nimport AutoTrainBoxTrainNum from '../components/trainBoxes/autoTrainBoxTrainNum';\n\nimport TagsBlock from '../components/tags'\n\nconst Home = (() => {\n\n    const router = useRouter()\n    \n    const MapWithNoSSR = Dynamic(() => import('../components/map'), {\n        ssr: false\n    });\n\n    const [trainData, setTrainData] = useState([]);\n\n    useEffect(() => {\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        const localParamsTemp = Object.fromEntries(urlSearchParams.entries());\n        \n        if (localParamsTemp.delete) {\n            let savedTrainsList = localStorage.getItem('savedTrains') ? localStorage.getItem('savedTrains') : '{}';\n            savedTrainsList = JSON.parse(savedTrainsList);\n            \n            let deleteString = `${localParamsTemp.n}-${localParamsTemp.d}`;\n            delete savedTrainsList[deleteString];\n            localStorage.setItem('savedTrains', JSON.stringify(savedTrainsList));\n            router.replace('/');\n        }\n\n        if (localParamsTemp.add) {\n            let savedTrainsList = localStorage.getItem('savedTrains') ? localStorage.getItem('savedTrains') : '{}';\n            savedTrainsList = JSON.parse(savedTrainsList);\n    \n            savedTrainsList[`${localParamsTemp.n}-${localParamsTemp.d}`] = savedTrainsList[`${localParamsTemp.n}-${localParamsTemp.d}`] ? savedTrainsList[`${localParamsTemp.n}-${localParamsTemp.d}`] : [];\n    \n            localStorage.setItem('savedTrains', JSON.stringify(savedTrainsList));\n\n            router.replace('/');\n        }\n    }, [])\n\n    //updating trains and putting on map\n    useEffect(() => {\n        let savedTrainsList = localStorage.getItem('savedTrains') ? localStorage.getItem('savedTrains') : '{}';\n        savedTrainsList = JSON.parse(savedTrainsList);\n\n        let trainKeys = Object.keys(savedTrainsList);\n        for (let i = 0; i < trainKeys.length; i++) {\n            console.log(trainKeys[i])\n            fetch(`https://api.amtraker.com/v1/trains/${trainKeys[i].split('-')[0]}`)\n                .then((res) => res.json())\n                .then((receivedTrainData) => {\n\n                    for (let j = 0; j < receivedTrainData.length; j++) {\n                        if (new Date(receivedTrainData[j].origSchDep).getDate() == parseInt(trainKeys[i].split('-')[1])) {\n\n                            console.log(new Date(receivedTrainData[j].origSchDep).getDate())\n                            console.log(parseInt(trainKeys[i].split('-')[1]))\n                            console.log(new Date(receivedTrainData[j].origSchDep).getDate() == parseInt(trainKeys[i].split('-')[1]))\n                            console.log(receivedTrainData[j])\n                            //let trainDataTemp = trainData.map((entry) => entry);\n                            //trainDataTemp.push(receivedTrainData[j])\n                            \n                            //setTrainData(trainDataTemp);\n                            setTrainData(trainData => [...trainData, receivedTrainData[j]]);\n                        }\n                    }\n                })\n        }\n        \n    }, []);\n\n    console.log(trainData)\n    \n    return (\n        <div>\n            <TagsBlock />\n            <main className=\"screen\">\n                <section className=\"trainsBarAlign\">\n                    <details className=\"content\">\n                        <summary>\n                            Your Trains\n                        </summary>\n                        {\n                            trainData.map((entry) => {\n                                return <AutoTrainBoxTrainNum key={`${entry.trainNum}-${new Date(entry.origSchDep).getDate()}`} trainNum={entry.trainNum} trainDate={new Date(entry.origSchDep).getDate()} clickable={true}/>\n                            })\n                        }\n                        \n                        <Link href=\"../trains/new\">\n                            <a className=\"trainBoxLink\">\n                                <p className=\"card trainCard newTrain clickableThing\">+ New Train</p>    \n                            </a>\n                        </Link>\n                    </details>\n                </section>\n            </main>\n\n            <script async src=\"../scripts/menu.js\"></script>\n            \n            <MapWithNoSSR trainData={trainData}/>\n        </div>\n    )\n})\n\nexport default Home;\n","/home/runner/amtraker-next/pages/trains/[trainNum].jsx",["81"],"import { data } from \"../../public/data/trainNums\";\nimport TagsBlockTrain from '../../components/tagsTrain';\nimport TrainLinks from '../../components/trainLinks';\nimport AutoTrainBoxTrainNum from '../../components/trainBoxes/autoTrainBoxTrainNum';\nimport StationListTrainNum from '../../components/stationBoxes/trainNum'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from \"react\";\n\nexport async function getStaticPaths() {\n\n    const paths = Object.keys(data).map((number) => ({\n        params: { trainNum: number }\n    }))\n\n    return { paths, fallback: false }\n}\n\n// params will contain the id for each generated page.\nexport async function getStaticProps({ params }) {    \n    return {\n        props: {\n            trainNum: params.trainNum,\n            trainName: data[params.trainNum]\n        }\n    }\n}\n\nexport default function Train(params) {\n\n    const router = useRouter();\n\n    const [dataDates, setDataDates] = useState([]);\n    const [backState, setBackState] = useState(false);\n    const [startDate, setStartDate] = useState(null);\n    const [isLoading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setBackState(window.history.state.idx == 0);\n    }, [])\n\n    const ohShitGoBack = (() => {\n        if (backState) {\n            router.replace('/');\n        } else {\n            router.back();\n        }\n    })\n\n    useEffect(() => {\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        const localParamsTemp = Object.fromEntries(urlSearchParams.entries());\n\n        setStartDate(localParamsTemp.d);\n        \n        setLoading(true)\n        fetch('https://api.amtraker.com/v1/trains/dates')\n            .then((res) => res.json())\n            .then((dates) => {\n                const justDates = [];\n\n                if (dates[params.trainNum] && dates[params.trainNum].length > 0) {\n                    for (let i = 0; i < dates[params.trainNum].length; i++) {\n                        const tempDate = new Date(dates[params.trainNum][i]);\n                        justDates.push(tempDate.getDate());\n                    }\n                }\n\n                setDataDates(justDates);\n                //setDataDates(dates[params.trainNum]);\n                setLoading(false)\n            })\n\n        console.log('checking for date idk')\n        \n        if (params.trainNum && (dataDates.includes(parseInt(startDate)) || dataDates.includes(new Date(startDate).getDate()))) {\n            \n            let savedTrainsList = localStorage.getItem('savedTrains') ? localStorage.getItem('savedTrains') : '{}';\n            savedTrainsList = JSON.parse(savedTrainsList);\n\n            console.log('date exists so i should save new stuff idk!')\n            console.log(savedTrainsList)\n            console.log(params.trainNum)\n            console.log(startDate)\n    \n            savedTrainsList[`${params.trainNum}-${startDate}`] = savedTrainsList[`${params.trainNum}-${startDate}`] ? savedTrainsList[`${params.trainNum}-${startDate}`] : [];\n    \n            localStorage.setItem('savedTrains', JSON.stringify(savedTrainsList));\n        }\n        \n        \n    }, [])    \n\n    if (params.trainNum && (dataDates.includes(parseInt(startDate)) || dataDates.includes(new Date(startDate).getDate()))) {\n        return (\n            <>\n                <TagsBlockTrain trainNum={params.trainNum} trainName={params.trainName}/>\n        \t\t<header>\n                    <div>\n            \t\t\t<h2 className=\"clickable\"><a onClick={() => ohShitGoBack()}>Back</a></h2>\n            \t\t\t<h1>View Train</h1>\n            \t\t\t<h2 onClick={() => router.push(`/?delete=true&n=${params.trainNum}&d=${startDate}`)} className=\"clickable\">Delete Train</h2>\n                    </div>\n        \t\t</header>\n        \n        \t\t<main className=\"trainsHolder\">\n        \t\t\t<AutoTrainBoxTrainNum trainNum={params.trainNum} trainDate={startDate} clickable={'false'}/>\n        \t\t</main>\n        \n        \t\t<header>\n        \t\t\t<h1>Stations</h1>\n        \t\t</header>\n        \t\t\n        \t\t<main id=\"stationsHolder\" className=\"stationsHolder\">\n            \t\t<StationListTrainNum trainNum={params.trainNum} trainDate={startDate}/>\n                </main>\n            </>\n        )\n    } else {\n        return (\n            <>\n                <TagsBlockTrain trainNum={params.trainNum} trainName={params.trainName}/>\n                <TrainLinks trainNum={params.trainNum} trainName={params.trainName}/>\n            </>\n        )\n    }\n}\n","/home/runner/amtraker-next/pages/trains/saved.jsx",[],"/home/runner/amtraker-next/components/map.jsx",[],"/home/runner/amtraker-next/components/tags.jsx",[],"/home/runner/amtraker-next/components/tagsTrain.jsx",[],"/home/runner/amtraker-next/components/trainBoxes/autoTrainBoxObjectID.jsx",["82"],"import ManualTrainBox from '../trainBoxes/manualTrainBox';\nimport ErrorTrainBox from '../trainBoxes/errorTrainBox';\nimport { useEffect, useState } from \"react\";\n\nconst AutoTrainBoxObjectID = ({ objectID, clickable }) => {\n    const [data, setData] = useState(null)\n    const [isLoading, setLoading] = useState(false)\n\n    useEffect(() => {\n        setLoading(true)\n        fetch('https://api.amtraker.com/v1/trains/ids')\n            .then((res) => res.json())\n            .then((idData) => {\n                setLoading(false)\n                fetch(`https://api.amtraker.com/v1/trains/${idData[objectID]}`)\n                    .then((res) => res.json())\n                    .then((trainData) => {\n        \n                        var trainObj = {};\n                        \n                        for (var i = 0; i < trainData.length; i++) {\n                            if (trainData[i].objectID == objectID) {\n                                trainObj = trainData[i];\n                            }                    \n                        }\n                        \n                        setData(trainObj)\n                        setLoading(false)\n                    })\n            })\n    }, [])\n\n    if (data == null || data == undefined) {\n        return (\n            <>\n                <ErrorTrainBox error={\"Train not found!\"} errorDetails={\"Whatever train should have existed doesn't (at least from what I can tell), and if you're seeing this, that means something has terribly wrong within my code.\"}/>\n            </>\n        )\n    } else {\n        return (\n            <>\n                <ManualTrainBox trainObj={data} clickable={clickable}/>\n            </>\n        )    \n    }\n};\n\nexport default AutoTrainBoxObjectID;","/home/runner/amtraker-next/components/trainBoxes/errorTrainBox.jsx",[],"/home/runner/amtraker-next/components/trainBoxes/manualTrainBox.jsx",[],"/home/runner/amtraker-next/components/trainBoxes/stationBox.jsx",[],"/home/runner/amtraker-next/components/trainLinks.jsx",["83"],"import Link from 'next/link';\nimport { useEffect, useState } from \"react\";\n\nconst TrainLinks = (({trainNum, trainName}) => {\n\n    const [data, setData] = useState([])\n    const [isLoading, setLoading] = useState(false)\n\n    useEffect(() => {\n        setLoading(true)\n        fetch(`https://api.amtraker.com/v1/trains/${trainNum}`)\n            .then(async (res) => {\n                try {\n                    let trainData = await res.json();\n                    let dates = trainData.map((train) => {\n                        return train.origSchDep.toString();\n                    });\n\n                    setData(dates);\n                    setLoading(false);\n                } catch {\n                    setData(\"noActive\");\n                }\n            })\n    }, [])\n\n    //let dates = JSON.parse(JSON.stringify(data));\n    let dates = data;\n    \n    if (dates == \"noActive\" || dates.length == 0) {\n        return (\n            <div className=\"trainSelector\">\n                <p>There are currently no active {trainName} trains.</p>\n            </div>\n        )\n    } else {        \n        return (\n            <div className=\"trainSelector\">\n                <p>Which day&#39;s train would you like to track?</p>\n                {data.map((trainDate) => {\n                    return (\n                        <p key={`${trainNum}-${new Date(trainDate).getDate()}`}>\n                            <Link\n                                href={{\n                                    pathname: `/trains/${trainNum}/${new Date(trainDate).getDate()}`,\n                                }}\n                                key={trainDate}\n                            >\n                                <a>{new Date(trainDate).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</a>\n                            </Link>\n                        </p>\n                    )\n                })}\n            </div>\n        )   \n    }\n})\n\nexport default TrainLinks;","/home/runner/amtraker-next/components/nav/borger.jsx",[],"/home/runner/amtraker-next/components/stationBoxes/stationBox.jsx",[],"/home/runner/amtraker-next/components/stationBoxes/trainNum.jsx",["84","85"],"import StationBox from '../stationBoxes/stationBox';\nimport { useEffect, useState } from \"react\";\n\nconst StationListTrainNum = ({ trainNum, trainDate }) => {\n    const [data, setData] = useState(null);\n    const [dateSetting, setDateSetting] = useState(null);\n    const [isLoading, setLoading] = useState(false);\n\n    const [count, setCount] = useState(0);\n  \n    useEffect(() => {\n        setDateSetting(localStorage.getItem('dateSetting') ? localStorage.getItem('dateSetting') : 'both')\n    });\n\n    useEffect(() => {\n        setLoading(true)\n        fetch(`https://api.amtraker.com/v1/trains/${trainNum}`)\n            .then((res) => res.json())\n            .then((trainData) => {\n\n                var trainObj = {};\n                \n                for (var i = 0; i < trainData.length; i++) {\n                    if (trainData[i].origSchDep == trainDate || new Date(trainData[i].origSchDep).getDate() == trainDate) {\n                        trainObj = trainData[i];\n                    }                    \n                }\n                \n                setData(trainObj)\n                setLoading(false)\n            })\n            \n    }, [])\n\n    if (!data) {\n        return (\n            <>\n                There was an error fetching the station data for this train. Please try again later or email me: piero (at) piemadd (dot) com.\n            </>\n        )\n    } else {\n        return (\n            <>\n                {data.stations.map((station) => {\n                    return <StationBox key={station.code} stationObj={station} dateSetting={dateSetting}/>\n                })}\n            </>\n        )    \n    }\n};\n\nexport default StationListTrainNum;","/home/runner/amtraker-next/components/trainBoxes/autoTrainBoxTrainNum.jsx",["86"],"import ManualTrainBox from '../trainBoxes/manualTrainBox';\nimport ErrorTrainBox from '../trainBoxes/errorTrainBox';\nimport { useEffect, useState } from \"react\";\nimport Link from 'next/link';\n\nconst AutoTrainBoxTrainNum = ({ trainNum, trainDate, clickable }) => {\n    const [data, setData] = useState(null)\n    const [isLoading, setLoading] = useState(false)\n\n    useEffect(() => {\n        setLoading(true)\n        fetch(`https://api.amtraker.com/v1/trains/${trainNum}`)\n            .then((res) => res.json())\n            .then((trainData) => {\n\n                var trainObj = {};\n                \n                for (var i = 0; i < trainData.length; i++) {\n                    if (trainData[i].origSchDep == trainDate || new Date(trainData[i].origSchDep).getDate() == trainDate) {\n                        trainObj = trainData[i];\n                    }                    \n                }\n                \n                setData(trainObj)\n                setLoading(false)\n            })\n            \n    }, [])\n\n    if (data == null || data == undefined) {\n        return (\n            <>\n                <ErrorTrainBox error={\"Train not found!\"} errorDetails={\"Whatever train should have existed doesn't (at least from what I can tell), and if you're seeing this, that means something has terribly wrong within my code.\"}/>\n            </>\n        )\n    } else if (clickable == 'false') {\n        return (\n            <ManualTrainBox trainObj={data} clickable={clickable}/>\n        )    \n    } else {\n        return (\n            <Link href={`../trains/${trainNum}?d=${trainDate}`} className=\"trainBoxLink\">\n                <a className=\"trainBoxLink\">\n                    <ManualTrainBox trainObj={data} clickable={clickable}/>\n                </a>\n            </Link>\n        )    \n    }\n};\n\nexport default AutoTrainBoxTrainNum;","/home/runner/amtraker-next/pages/trains/[...slug].jsx",[],"/home/runner/amtraker-next/pages/trains/new.jsx",[],{"ruleId":"87","severity":1,"message":"88","line":44,"column":8,"nodeType":"89","endLine":44,"endColumn":10,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":91,"column":8,"nodeType":"89","endLine":91,"endColumn":10,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":31,"column":8,"nodeType":"89","endLine":31,"endColumn":10,"suggestions":"94"},{"ruleId":"87","severity":1,"message":"95","line":25,"column":8,"nodeType":"89","endLine":25,"endColumn":10,"suggestions":"96"},{"ruleId":"87","severity":1,"message":"97","line":11,"column":5,"nodeType":"98","endLine":11,"endColumn":14,"suggestions":"99"},{"ruleId":"87","severity":1,"message":"100","line":33,"column":8,"nodeType":"89","endLine":33,"endColumn":10,"suggestions":"101"},{"ruleId":"87","severity":1,"message":"100","line":28,"column":8,"nodeType":"89","endLine":28,"endColumn":10,"suggestions":"102"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has missing dependencies: 'dataDates', 'params.trainNum', and 'startDate'. Either include them or remove the dependency array.",["104"],"React Hook useEffect has a missing dependency: 'objectID'. Either include it or remove the dependency array.",["105"],"React Hook useEffect has a missing dependency: 'trainNum'. Either include it or remove the dependency array.",["106"],"React Hook useEffect contains a call to 'setDateSetting'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["107"],"React Hook useEffect has missing dependencies: 'trainDate' and 'trainNum'. Either include them or remove the dependency array.",["108"],["109"],{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},"Update the dependencies array to be: [router]",{"range":"123","text":"124"},"Update the dependencies array to be: [dataDates, params.trainNum, startDate]",{"range":"125","text":"126"},"Update the dependencies array to be: [objectID]",{"range":"127","text":"128"},"Update the dependencies array to be: [trainNum]",{"range":"129","text":"130"},"Add dependencies array: []",{"range":"131","text":"132"},"Update the dependencies array to be: [trainDate, trainNum]",{"range":"133","text":"134"},{"range":"135","text":"134"},[1741,1743],"[router]",[3135,3137],"[dataDates, params.trainNum, startDate]",[1198,1200],"[objectID]",[768,770],"[trainNum]",[494,494],", []",[1150,1152],"[trainDate, trainNum]",[1011,1013]]